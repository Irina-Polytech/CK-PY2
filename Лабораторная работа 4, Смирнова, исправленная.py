class Spotlight:
    """
    Документация на класс.
    Базовый класс прожекторов, описывающий общую модель театрального прожектора.
    """
    def __init__(self, id: int, socket_number: int = None):
        """
        Инициализация экземпляра базового класса.

        :param __id: Идентификационный номер прожектора.
        Присваивается единожды и не подлежит замене.
        Может состоять из букв и знаков (в этом случае рекомендуется применение типа str),
        поэтому проверка на соответствие типу int не устанавливается.
        :param socket_number: Номер розетки, к которой в текущий момент подключён прожектор.
        Может быть типа None, если прожектор в текущий момент отключён от сети.

        Example:
        >>> lamp = Spotlight(543789, 35)
        """
        self.__id = id
        if socket_number is not None:  # проверяем соответствие номера розетки типу None
            if not isinstance(socket_number, int):  # проверяем соответствие номера розетки типу int
                raise TypeError("Номер розетки должен быть типа int")
            if socket_number <= 0:  # проверяем, положительность значения номера розетки
                raise ValueError("Номер розетки должен быть отражён положительным числом")
        self._socket_number = socket_number

    def __str__(self) -> str:
        """Инициализация поведения функции str() для экзэмпляра класса"""
        return f'Прожектор №{self.__id}'

    def __repr__(self) -> str:
        """Инициализация поведения функции repr() для экзэмпляра класса"""
        return f'{self.__class__.__name__} №{self.get_id()}'

    def get_id(self):
        """Метод возвращает идентификационный номер прожектора"""
        return self.__id

    def change_socket(self, new_socket: int):
        """
        Метод используется при настройке театрального света.
        Позволяет изменять розетки при смене места положения прожектора.
        :param new_socket: Новый номер розетки.
        При отключении прожектора от сети номер может вернуться в тип None.
        """
        if new_socket is not None:  # проверяем соответствие нового номера розетки типу None
            if not isinstance(new_socket, int):  # проверяем соответствие нового номера розетки типу int
                raise TypeError("Номер розетки должен быть типа int")
            if new_socket <= 0:  # проверяем, положительность значения нового номера розетки
                raise ValueError("Номер розетки должен быть отражён положительным числом")
        self._socket_number = new_socket

class LampSpotlight(Spotlight):
    """
    Дочерний класс прожекторов: Ламповые.
    Работают на лампах накаливания.
    Возможна вариабельность установленных линз.
    И применения плёночных и стеклянных фильтров различных цветов.
    :param _lens: Вид линзы.
    Как правило, плоско-выпуклая (-> задано по умолчанию); реже - линза Фринеля.
    :param _filter_color: Цвет установленного фильтра.
    В случае отсутствия фильтра представлен типом None.
    """
    _lens: str = "Плоско-выпуклая"
    _filter_color: str = None

    def change_lens(self, new_lens: str):
        """
        Метод, используемый в случае замены линзы в прожекторе.
        :param new_lens: Вид новой устанавливаемой линзы.
        """
        if not isinstance(new_lens, str):  # проверяем соответствие название вида устанавливаемой линзы типу str
            raise TypeError("Вид линзы должен быть типа str")
        self._lens = new_lens

    def change_filter_color(self, new_filter_color: str):
        """
        Метод, изменяющий фильтр прожектора.
        :param new_filter_color: Цвет вновь устанавливаемого фильтра.
        В случае снятия фильтра может вернуться к типу None.
        """
        if new_filter_color is not None:  # проверяем возможность осуществления снятия фильтра
            if not isinstance(new_filter_color, str):  # проверяем соответствие обозначения цвета фильтра типу str
                raise TypeError("Название фильтра должно быть типа str")
        self._filter_color = new_filter_color

class HalogenSpotlight(Spotlight):
    """
    Дочерний класс прожекторов: Галогенные.
    Работает на галогенной лампе.
    В случае необходимости изменения цвета светового потока используется фильтр из жаропрочного стекла.
    :param _glass_color: Цвет установленного стеклянного фильтра.
    В случае снятия фильтра может вернуться к типу None.
    """
    _glass_color: str = None
    def __init__(self, power: int, id: int, socket_number: int = None):
        """
        Инициализация экземпляра дочернего класса: Галогенные.

        :param id: Идентификационный номер, наследуется от базового класса.
        :param socket_number: Номер розетки, наследуется от базового класса.
        :param power: Исходная мощность прожектора.
        В стандартной ситуации мощность не подлежит изменению.

        Example:
        >>> lamp = HalogenSpotlight(500, 345890, 76)
        """
        super().__init__(id, socket_number)  # вызываем конструктор базового класса
        self.__power = power #Исходная мощность прожектора в стандартной ситуации не подлежит изменению

    def __str__(self) -> str:
        """
        Инициализация поведения функции str() для экзэмпляра класса HalogenSpotlight.
        В осветительской терминологии галогенный прожектор называют Лягушка,
        поэтому при идентификации название удобнее выводить в привычном формате.
        """
        id_number = self.get_id()
        return f'Лягушка №{id_number}'

    def change_glass_color(self, new_glass_color: str):
        """
        Метод, изменяющий цвет стекла галогенного прожектора.
        :param new_glass_color: Новый цвет стеклянного фильтра.
        В случае снятия фильтра может вернуться к типу None.
        """
        if new_glass_color is not None:  # проверяем возможность осуществления снятия фильтра
            if not isinstance(new_glass_color, str):  # проверяем соответствие обозначения цвета фильтра типу str
                raise TypeError("Цвет должен быть типа str")
        self._glass_color = new_glass_color

class LedSpotlight(Spotlight):
    """
    Дочерний класс прожекторов: Светодиодные.
    Функционируют на матрице с led-диодами.
    Цвет светового потока изменяется с помощью пульта управления.
    :param _rgb: Цвет светового потока.
    Значение по умолчанию - белый.
    """
    _rgb: str = 'white'

    def change_rgb(self, new_rgb: str):
        """
        Метод, изменяющий цвет светодиодной лампы в спектре RGB.
        :param new_rgb: Новый цвет светодиодного прожектора.
        """
        if not isinstance(new_rgb, str):  # проверяем соответствие обозначения цвета типу str
            raise TypeError("Цвет должен быть типа str")
        self._rgb = new_rgb
